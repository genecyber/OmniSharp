/* Generated by JSIL v0.8.1 build 920. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm05 = JSIL.DeclareAssembly("System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Numerics");
/* struct System.Numerics.BigInteger */ 

(function BigInteger$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigInteger", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt64)
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "BitLengthOfUInt", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "DivRem", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get__Bits", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get__Sign", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEven", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsOne", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsPowerOfTwo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsZero", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_MinusOne", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Sign", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "GetDiffLength", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPartsForBitManipulation", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreatestCommonDivisor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Length", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Double, [$.Type, $.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log10", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ModPow", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ModPowInner", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowInner32", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowSquareModValue", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModPowUpdateResult", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigIntegerBuilder")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulLower", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:false}, "MulUpper", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseAnd", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_BitwiseOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Decrement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_ExclusiveOr", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Decimal")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Byte, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.SByte, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int16, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt16, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt64, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Single, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Increment", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LeftShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Int64, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.UInt64, $.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_OnesComplement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_RightShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm00.TypeRef("System.Globalization.NumberStyles")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm00.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.IFormatProvider")
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Remainder", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:false}, "SetBitsFromDouble", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm00.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ToUInt32Array", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "_sign", $.Int32); 
    $.Field({Static:false, Public:false}, "_bits", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinInt", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnOneInt", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnZeroInt", $.Type); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "s_bnMinusOneInt", $.Type); 
    $.Constant({Static:true , Public:false}, "knMaskHighBit", -2147483648); 
    $.Constant({Static:true , Public:false}, "kuMaskHighBit", 2147483648); 
    $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
    $.Constant({Static:true , Public:false}, "kcbitUlong", 64); 
    $.Constant({Static:true , Public:false}, "DecimalScaleFactorMask", 16711680); 
    $.Constant({Static:true , Public:false}, "DecimalSignMask", -2147483648); 
    function BigInteger__cctor () {
      $thisType.s_bnMinInt = new $thisType();
      $thisType.s_bnOneInt = new $thisType();
      $thisType.s_bnZeroInt = new $thisType();
      $thisType.s_bnMinusOneInt = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BigInteger__cctor
    );

    $.Property({Static:true , Public:true }, "Zero", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "One", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:true , Public:true }, "MinusOne", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsPowerOfTwo", $.Boolean)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsZero", $.Boolean)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsOne", $.Boolean)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "IsEven", $.Boolean)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Sign", $.Int32)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:false}, "_Sign", $.Int32);

    $.Property({Static:false, Public:false}, "_Bits", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IFormattable"), 
      /* 1 */ $asm00.TypeRef("System.IComparable"), 
      /* 2 */ $asm00.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.Complex */ 

(function Complex$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numerics.Complex", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Double, $.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Double, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Acos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Asin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Atan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Conjugate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cos", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cosh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exp", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromPolarCoordinates", 
      new JSIL.MethodSignature($.Type, [$.Double, $.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Imaginary", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true }, "get_Magnitude", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Phase", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Real", 
      JSIL.MethodSignature.Return($.Double)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Log10", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm05.TypeRef("System.Numerics.BigInteger")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Decimal")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; })
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reciprocal", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Scale", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sin", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sinh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sqrt", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.TargetedPatchingOptOutAttribute"), function () { return ["Performance critical to inline this type of method across NGen image boundaries"]; });

    $.ExternalMethod({Static:true , Public:true }, "Tan", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Tanh", 
      new JSIL.MethodSignature($.Type, [$.Type])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm00.TypeRef("System.IFormatProvider")])
    )
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Field({Static:false, Public:false}, "m_real", $.Double); 
    $.Field({Static:false, Public:false}, "m_imaginary", $.Double); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "Zero", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "One", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute")); 
    $.Field({Static:true , Public:true , ReadOnly:true }, "ImaginaryOne", $.Type)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute")); 
    $.Constant({Static:true , Public:false}, "LOG_10_INV", 0.43429448190325); 
    function Complex__cctor () {
      $thisType.Zero = new $thisType();
      $thisType.One = new $thisType();
      $thisType.ImaginaryOne = new $thisType();
    };


    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Complex__cctor
    );

    $.Property({Static:false, Public:true }, "Real", $.Double)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Imaginary", $.Double)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Magnitude", $.Double)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.Property({Static:false, Public:true }, "Phase", $.Double)
      .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm00.TypeRef("System.IFormattable")
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm05.TypeRef("__DynamicallyInvokableAttribute"));

})();

/* struct System.Numerics.BigIntegerBuilder */ 

(function BigIntegerBuilder$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigIntegerBuilder", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm05.TypeRef("System.Numerics.BigInteger"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm05.TypeRef("System.Numerics.BigInteger"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:false}, "AddCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddMulCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyBorrow", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ApplyCarry", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true }, "CbitLowZero", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Div", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "DivMod", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "EnsureWritable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CuNonZero", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_High", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Size", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetApproxParts", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHigh2", 
      new JSIL.MethodSignature($.UInt64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetInteger", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Numerics.BigInteger"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIntegerParts", 
      new JSIL.MethodSignature(null, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LehmerGcd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeOdd", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "Mod", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Mod", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ModDiv", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ModDivCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Mul", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MulCarry", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      JSIL.MethodSignature.Action($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeClear", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeKeep", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSizeLazy", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftLeft", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "ShiftRight", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sub", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Sub", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "SubBorrow", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubRev", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Type]))
    );

    $.ExternalMethod({Static:true , Public:false}, "SubRevBorrow", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Trim", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
    $.Field({Static:false, Public:false}, "_iuLast", $.Int32); 
    $.Field({Static:false, Public:false}, "_uSmall", $.UInt32); 
    $.Field({Static:false, Public:false}, "_rgu", $jsilcore.TypeRef("System.Array", [$.UInt32])); 
    $.Field({Static:false, Public:false}, "_fWritable", $.Boolean); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "kdblLn2To32", $.Double, 32 * (Math.log(2))); 
    $.Field({Static:true , Public:false, ReadOnly:true }, "_rgbInv", $jsilcore.TypeRef("System.Array", [$.Byte])); 
    $.Property({Static:false, Public:true }, "Size", $.Int32);

    $.Property({Static:false, Public:true }, "High", $.UInt32);

    $.Property({Static:false, Public:false}, "CuNonZero", $.Int32);

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Numerics.BigNumber */ 

(function BigNumber$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Numerics.BigNumber", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:false}, "FormatBigInteger", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Numerics.BigInteger"), $.String, 
          $asm00.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FormatBigIntegerToHexString", 
      new JSIL.MethodSignature($.String, [
          $asm05.TypeRef("System.Numerics.BigInteger"), $.Char, 
          $.Int32, $asm00.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexNumberToBigInteger", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigNumber+BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigInteger")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "NumberToBigInteger", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigNumber+BigNumberBuffer")]), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigInteger")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseBigInteger", 
      new JSIL.MethodSignature($asm05.TypeRef("System.Numerics.BigInteger"), [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseFormatSpecifier", 
      new JSIL.MethodSignature($.Char, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseBigInteger", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.Globalization.NumberFormatInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm05.TypeRef("System.Numerics.BigInteger")])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecuritySafeCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryValidateParseStyleInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Globalization.NumberStyles"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.ArgumentException")])])
    );

    $.Constant({Static:true , Public:false}, "InvalidNumberStyles", -1024); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.BigNumber+BigNumberBuffer */ 

(function BigNumberBuffer$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numerics.BigNumber+BigNumberBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.Field({Static:false, Public:true }, "digits", $asm00.TypeRef("System.Text.StringBuilder")); 
    $.Field({Static:false, Public:true }, "precision", $.Int32); 
    $.Field({Static:false, Public:true }, "scale", $.Int32); 
    $.Field({Static:false, Public:true }, "sign", $.Boolean); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Numerics.DoubleUlong */ 

(function DoubleUlong$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numerics.DoubleUlong", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Field({Static:false, Public:true }, "dbl", $.Double); 
    $.Field({Static:false, Public:true }, "uu", $.UInt64); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Numerics.NumericsHelpers */ 

(function NumericsHelpers$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("System.Numerics.NumericsHelpers", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.UInt32, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitHighZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "CbitLowZero", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "CombineHash", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "DangerousMakeTwosComplement", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GCD", 
      new JSIL.MethodSignature($.UInt64, [$.UInt64, $.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDoubleFromParts", 
      new JSIL.MethodSignature($.Double, [
          $.Int32, $.Int32, 
          $.UInt64
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDoubleParts", 
      new JSIL.MethodSignature(null, [
          $.Double, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.UInt64]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHi", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLo", 
      new JSIL.MethodSignature($.UInt32, [$.UInt64])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUlong", 
      new JSIL.MethodSignature($.UInt64, [$.UInt32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "resize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Swap", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", ["!!0"]), $jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    );

    $.Constant({Static:true , Public:false}, "kcbitUint", 32); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("FXAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "Title", "System.Numerics.dll"); 
    $.Constant({Static:true , Public:false}, "Description", "System.Numerics.dll"); 
    $.Constant({Static:true , Public:false}, "DefaultAlias", "System.Numerics.dll"); 
    $.Constant({Static:true , Public:false}, "Copyright", "\xa9 Microsoft Corporation.  All rights reserved."); 
    $.Constant({Static:true , Public:false}, "Version", "4.0.0.0"); 
    $.Constant({Static:true , Public:false}, "InformationalVersion", "4.0.30319.0"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumberStr", "30319"); 
    $.Constant({Static:true , Public:false}, "BuildRevisionStr", "0"); 
    $.Constant({Static:true , Public:false}, "DailyBuildNumber", 30319); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;
  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SilverlightPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKey", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyToken", "7cec85d7bea7798e"); 
    $.Constant({Static:true , Public:false}, "SilverlightPlatformPublicKeyFull", "00240000048000009400000006020000002400005253413100040000010001008D56C76F9E8649383049F383C44BE0EC204181822A6C31CF5EB7EF486944D032188EA1D3920763712CCB12D75FB77E9811149E6148E5D32FBAAB37611C1878DDC19E20EF135D0CB2CFF2BFEC3D115810C3D9069638FE4BE215DBF795861920E5AB6F7DB2E2CEEF136AC23D5DD2BF031700AEC232F6C6B1C785B4305C123B37AB"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKey", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyToken", "b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "PlatformPublicKeyFull", "00000000000000000400000000000000"); 
    $.Constant({Static:true , Public:false}, "Mscorlib", "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemData", "System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", "System.Data.OracleClient, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "System", "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemCore", "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemNumerics", "System.Numerics, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", "System.Runtime.Remoting, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemThreadingTasksDataflow", "System.Threading.Tasks.Dataflow, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWindowsForms", "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemXml", "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", "b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", "31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9"); 
    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", "System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemConfiguration", "System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", "System.Configuration.Install, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDeployment", "System.Deployment, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDesign", "System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", "System.DirectoryServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", "System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemDrawing", "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", "System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemManagement", "System.Management, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemMessaging", "System.Messaging, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemNetHttp", "System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemNetHttpWebRequest", "System.Net.Http.WebRequest, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", "System.Runtime.Serialization.Formatters.Soap, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntime", "System.Runtime.WindowsRuntime, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemRuntimeWindowsRuntimeUIXaml", "System.Runtime.WindowsRuntimeUIXaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemSecurity", "System.Security, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemServiceModelWeb", "System.ServiceModel.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemServiceProcess", "System.ServiceProcess, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWeb", "System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", "System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", "System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", "System.Web.DynamicData.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", "System.Web.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensions", "System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", "System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebMobile", "System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", "System.Web.RegularExpressions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "SystemWebRouting", "System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "SystemWebServices", "System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "WindowsBase", "WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", "Microsoft.VisualStudio, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", "Microsoft.VisualStudio.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", "VJSharpCodeProvider, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", "b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", "ASP.BrowserCapsFactory, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", "Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", "Microsoft.VisualStudio.Web, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", "Microsoft.Web.Design.Client, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    $.Constant({Static:true , Public:false}, "MicrosoftJScript", "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"); 
    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.Constant({Static:true , Public:false}, "Argument_InvalidNumberStyles", "Argument_InvalidNumberStyles"); 
    $.Constant({Static:true , Public:false}, "Argument_InvalidHexStyle", "Argument_InvalidHexStyle"); 
    $.Constant({Static:true , Public:false}, "Argument_MustBeBigInt", "Argument_MustBeBigInt"); 
    $.Constant({Static:true , Public:false}, "Format_InvalidFormatSpecifier", "Format_InvalidFormatSpecifier"); 
    $.Constant({Static:true , Public:false}, "Format_TooLarge", "Format_TooLarge"); 
    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MustBeNonNeg", "ArgumentOutOfRange_MustBeNonNeg"); 
    $.Constant({Static:true , Public:false}, "Overflow_BigIntInfinity", "Overflow_BigIntInfinity"); 
    $.Constant({Static:true , Public:false}, "Overflow_NotANumber", "Overflow_NotANumber"); 
    $.Constant({Static:true , Public:false}, "Overflow_ParseBigInteger", "Overflow_ParseBigInteger"); 
    $.Constant({Static:true , Public:false}, "Overflow_Int32", "Overflow_Int32"); 
    $.Constant({Static:true , Public:false}, "Overflow_Int64", "Overflow_Int64"); 
    $.Constant({Static:true , Public:false}, "Overflow_UInt32", "Overflow_UInt32"); 
    $.Constant({Static:true , Public:false}, "Overflow_UInt64", "Overflow_UInt64"); 
    $.Constant({Static:true , Public:false}, "Overflow_Decimal", "Overflow_Decimal"); 
    $.Field({Static:true , Public:false}, "loader", $.Type); 
    $.Field({Static:false, Public:false}, "resources", $asm00.TypeRef("System.Resources.ResourceManager")); 
    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm00.TypeRef("System.Resources.ResourceManager"));

    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class __DynamicallyInvokableAttribute */ 

(function __DynamicallyInvokableAttribute$Members () {
  var $, $thisType;
  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "__DynamicallyInvokableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($interfaceBuilder) {
    $ = $interfaceBuilder;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );

    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

